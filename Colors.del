import "Math.del";

define ColorValues(define Red = 255, define Green = 255, define Blue = 255, define Alpha = 255): [Red, Green, Blue, Alpha];
define Gradient(define ColorValues1, define ColorValues2, define Fraction):
    CustomColor(
        LinearInterpolate(ColorValues1[0], ColorValues2[0], Fraction),
        LinearInterpolate(ColorValues1[1], ColorValues2[1], Fraction),
        LinearInterpolate(ColorValues1[2], ColorValues2[2], Fraction),
        LinearInterpolate(ColorValues1[3], ColorValues2[3], Fraction)
    );

define AllColors: [Color.White, Color.Yellow, Color.Green, Color.Purple, Color.Red,
                   Color.Blue, Color.Aqua, Color.Orange, Color.SkyBlue, Color.Turquoise,
                   Color.LimeGreen, Color.Gray, Color.Violet, Color.Rose, Color.Black];

define AllColorNames: ["White", "Yellow", "Green", "Purple", "Red",
                       "Blue", "Aqua", "Orange", "SkyBlue", "Turquoise",
                       "LimeGreen", "Gray", "Violet", "Rose", "Black"];

define ColorValues(Color c): (c == Color.White)     ? [255, 255, 255, 255] :
                             (c == Color.Yellow)    ? [255, 255,   0, 255] :
                             (c == Color.Green)     ? [ 69, 255,  87, 255] :
                             (c == Color.Purple)    ? [161,  73, 197, 255] :
                             (c == Color.Red)       ? [200,   0,  19, 255] :
                             (c == Color.Blue)      ? [ 39, 170, 255, 255] :
                             (c == Color.Aqua)      ? [  0, 234, 234, 255] :
                             (c == Color.Orange)    ? [236, 153,   0, 255] :
                             (c == Color.SkyBlue)   ? [108, 190, 244, 255] :
                             (c == Color.Turquoise) ? [  0, 230, 151, 255] :
                             (c == Color.LimeGreen) ? [160, 232,  27, 255] :
                             (c == Color.Gray)      ? [127, 127, 127, 255] :
                             (c == Color.Violet)    ? [100,  50, 255, 255] :
                             (c == Color.Rose)      ? [255,  50, 145, 255] :
                             (c == Color.Black)     ? [  0,   0,   0, 255] : null;
