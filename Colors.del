import "Math.del";

class ComponentColor {
    public Number Red;
    public Number Green;
    public Number Blue;
    public Number Alpha;
    public constructor(Number red=255, Number green=255, Number blue=255, Number alpha=255) {
        this.Red    = red;
        this.Green  = green;
        this.Blue   = blue;
        this.Alpha  = alpha;
    }
    public constructor(Color c) {
        Number cIndex = IndexOfArrayValue(Colors.AllColors, c);
        this.Red    = Colors.AllColorComponents[cIndex][0];
        this.Green  = Colors.AllColorComponents[cIndex][1];
        this.Blue   = Colors.AllColorComponents[cIndex][2];
        this.Alpha  = Colors.AllColorComponents[cIndex][3];
    }
    public Color Out(): CustomColor(Red, Green, Blue, Alpha);
}

class Colors {
    public static Color LinearGradient(ComponentColor color1, ComponentColor color2, Number fraction):
        CustomColor(
            LinearInterpolate(color1.Red,   color2.Red,   fraction),
            LinearInterpolate(color1.Green, color2.Green, fraction),
            LinearInterpolate(color1.Blue,  color2.Blue,  fraction),
            LinearInterpolate(color1.Alpha, color2.Alpha, fraction)
        );

    public static Color StepGradient(Color[] colors, Number fraction):
        colors[Math.Floor(Math.Clamp(fraction, 0, 1) * 0.999 * CountOf(colors))];

    public static Color[] AllColors:
        [Color.White, Color.Yellow, Color.Green, Color.Purple, Color.Red,
         Color.Blue, Color.Aqua, Color.Orange, Color.SkyBlue, Color.Turquoise,
         Color.LimeGreen, Color.Gray, Color.Violet, Color.Rose, Color.Black];
    public static String[] AllColorNames:
        ["White", "Yellow", "Green", "Purple", "Red",
         "Blue", "Aqua", "Orange", "SkyBlue", "Turquoise",
         "LimeGreen", "Gray", "Violet", "Rose", "Black"];
    public static Number[][] AllColorComponents:
        [[255, 255, 255, 255], [255, 255,   0, 255], [ 69, 255,  87, 255],
         [161,  73, 197, 255], [200,   0,  19, 255], [ 39, 170, 255, 255],
         [  0, 234, 234, 255], [236, 153,   0, 255], [108, 190, 244, 255],
         [  0, 230, 151, 255], [160, 232,  27, 255], [127, 127, 127, 255],
         [100,  50, 255, 255], [255,  50, 145, 255], [  0,   0,   0, 255]];
    public static Color Hidden: CustomColor(alpha: 0);

    /* made using equations from https://www.rapidtables.com/convert/color/hsv-to-rgb.html */
    public static Number hsv_C(Number s, Number v): s * v;
    public static Number hsv_X(Number h, Number s, Number v): hsv_C(s,v) * (1 - AbsoluteValue((h/60) % 2 - 1));
    public static Number hsv_M(Number s, Number v): v - hsv_C(s,v);

    public static Number hsv_r(Number h, Number s, Number v): AbsoluteValue(h - 180) >= 120 ? hsv_C(s,v) : (AbsoluteValue(h - 180) >= 60 ? hsv_X(h,s,v) : 0);
    public static Number hsv_g(Number h, Number s, Number v): h % 180 < 60 ? hsv_X(h,s,v) : (h < 180 ? hsv_C(s,v) : 0);
    public static Number hsv_b(Number h, Number s, Number v): h % 180 >= 120 ? hsv_X(h,s,v) : (h >= 180 ? hsv_C(s,v) : 0);

    public static Color hsv(Number hue, Number saturation, Number value, Number alpha = 255): CustomColor(
    red:   (hsv_r(hue, saturation, value) + hsv_M(saturation, value)) * 255,
    green: (hsv_g(hue, saturation, value) + hsv_M(saturation, value)) * 255,
    blue:  (hsv_b(hue, saturation, value) + hsv_M(saturation, value)) * 255,
    alpha: alpha);
}

class TeamBasedColor {
    private Color enemy;
    private Color friendly;

    public constructor(Color _enemy = Color.Red, Color _friendly = Color.Blue)
    {
        enemy    = _enemy;
        friendly = _friendly;
    }

    public Color Display(Player owner=EventPlayer(), Player viewer=LocalPlayer()):
        (owner==viewer || TeamOf(owner) == TeamOf(viewer)) ? friendly : enemy;

    public void SetEnemy(Color newEnemyColor = Color.Red) {
        if (newEnemyColor != Color.Team1 && newEnemyColor != Color.Team2) enemy = newEnemyColor;
    }

    public void SetFriendly(Color newFriendlyColor = Color.Blue) {
        if (newFriendlyColor != Color.Team1 && newFriendlyColor != Color.Team2) enemy = newFriendlyColor;
    }

    public Color GetEnemy(): enemy;
    public Color GetFriendly(): friendly;
}
