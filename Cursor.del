import "OnScreenText.del";

globalvar Cursor[] AllCursors = [];

Number BASE_AIM_SPEED: 15;
class Cursor
{

    private Player owner;
    private Vector startFacing;
    private Number offsetX = 0;
    private Number offsetY = 0;
    private Number xMin; private Number xMax;
    private Number yMin; private Number yMax;
    private Number aimSpeed;
    //public static Cursor[] AllCursors = [];
    //Cursor's Constructor
    public constructor(in Number XMin = -2.5,  in Number XMax = 2.5,
                       in Number YMin = -1.25, in Number YMax = 1.25,
                       in Player Owner = EventPlayer()) {
        owner = Owner;
        startFacing  = FacingDirectionOf(Owner);
        prepPlayer(Owner);

        xMin = XMin; xMax = XMax;
        yMin = YMin; yMax = YMax;

        root.AllCursors += this;
    }

    private void prepPlayer(in Player player) {
        aimSpeed = root.BASE_AIM_SPEED;
        SetAimSpeed(player, aimSpeed);
        SetPrimaryFireEnabled(player, false);
        SetSecondaryFireEnabled(player, false);
    }

    private void unPrepPlayer(in Player player) {
        SetAimSpeed(player, 100);
        SetPrimaryFireEnabled(player, true);
        SetSecondaryFireEnabled(player, true);
    }

    private Number getAbsX():
        AngleDifference(
            HorizontalAngleFromDirection(FacingDirectionOf(owner)),
            HorizontalAngleFromDirection(startFacing)
        );

    private Number getAbsY():
        AngleDifference(
            VerticalAngleFromDirection(FacingDirectionOf(owner)),
            VerticalAngleFromDirection(startFacing)
        );

    private Number getRawX(): aimSpeed / root.BASE_AIM_SPEED * (getAbsX() + offsetX);
    private Number getRawY(): aimSpeed / root.BASE_AIM_SPEED * (getAbsY() + offsetY);
    public Number getX(): Math.Clamp(getRawX(), xMin, xMax);
    public Number getY(): Math.Clamp(getRawY(), yMin, yMax);
    public Boolean isOutOfBounds():
        !Math.IsInRange(getRawX(), xMin, xMax) ||
        !Math.IsInRange(getRawY(), yMin, yMax);

    public void updateOffset()
    {
        offsetX -= getRawX() - getX();
        offsetY -= getRawY() - getY();
    }

    public void close()
    {
        unPrepPlayer(owner);
        delete this;
    }

    public void updateAimSpeed(Number newSpeed)
    {
        newSpeed = Math.Clamp(newSpeed, 2, 50);
        if (newSpeed == aimSpeed) return;
        # Update offset to avoid cursor moving
        offsetX += (aimSpeed*(getAbsX() + offsetX) - newSpeed*(getAbsX() + offsetX)) / newSpeed;
        offsetY += (aimSpeed*(getAbsY() + offsetY) - newSpeed*(getAbsY() + offsetY)) / newSpeed;
        aimSpeed = newSpeed;
    }

    public Number getAimSpeed()
    {
        return aimSpeed;
    }
}

rule: "[Cursor.del] Cursor bounds"
Event.OngoingGlobal
if(/*Cursor.*/AllCursors != [])
if(IsTrueForAny(/*Cursor.*/AllCursors, <Cursor>ArrayElement()~isOutOfBounds()))
{
    Cursor[] cursorsToUpdate = FilteredArray(/*Cursor.*/AllCursors, <Cursor>ArrayElement()~isOutOfBounds());
    foreach(Cursor c in cursorsToUpdate)
        c.updateOffset();
}
